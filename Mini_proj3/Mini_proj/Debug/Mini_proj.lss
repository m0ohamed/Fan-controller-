
Mini_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  000020f4  00002168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bc0  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eff  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00004ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000050e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00008876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00009c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  00009f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 65 0e 	call	0x1cca	; 0x1cca <main>
      7a:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e8       	ldi	r26, 0x82	; 130
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e8       	ldi	r24, 0x82	; 130
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e8       	ldi	r22, 0x82	; 130
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e6 57       	subi	r30, 0x76	; 118
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:



//if pooling mode
void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
ADMUX = (ADMUX & 0x3F) | ((Config_Ptr->ref_volt)<<6);//set the voltage
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	28 2f       	mov	r18, r24
     e38:	2f 73       	andi	r18, 0x3F	; 63
     e3a:	e9 81       	ldd	r30, Y+1	; 0x01
     e3c:	fa 81       	ldd	r31, Y+2	; 0x02
     e3e:	80 81       	ld	r24, Z
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	00 24       	eor	r0, r0
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	07 94       	ror	r0
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	07 94       	ror	r0
     e52:	98 2f       	mov	r25, r24
     e54:	80 2d       	mov	r24, r0
     e56:	82 2b       	or	r24, r18
     e58:	8c 93       	st	X, r24
ADCSRA =(1<<ADEN);
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 e8       	ldi	r24, 0x80	; 128
     e60:	80 83       	st	Z, r24
ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr->prescaler);
     e62:	a6 e2       	ldi	r26, 0x26	; 38
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e6 e2       	ldi	r30, 0x26	; 38
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	98 2f       	mov	r25, r24
     e6e:	98 7f       	andi	r25, 0xF8	; 248
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <ADC_readChannel>:
#endif

#if(ADC_MODE==ADC_pooling_mode)

uint16 ADC_readChannel(uint8 channel)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
	channel &= 0x07;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	87 70       	andi	r24, 0x07	; 7
     e94:	89 83       	std	Y+1, r24	; 0x01
		ADMUX &= 0xE0;
     e96:	a7 e2       	ldi	r26, 0x27	; 39
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e7 e2       	ldi	r30, 0x27	; 39
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 7e       	andi	r24, 0xE0	; 224
     ea2:	8c 93       	st	X, r24
		ADMUX = ADMUX | channel;
     ea4:	a7 e2       	ldi	r26, 0x27	; 39
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e2       	ldi	r30, 0x27	; 39
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	90 81       	ld	r25, Z
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	89 2b       	or	r24, r25
     eb2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,6);
     eb4:	a6 e2       	ldi	r26, 0x26	; 38
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e6 e2       	ldi	r30, 0x26	; 38
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,4));
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	80 71       	andi	r24, 0x10	; 16
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	b9 f3       	breq	.-18     	; 0xec2 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,4);
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 61       	ori	r24, 0x10	; 16
     ee0:	8c 93       	st	X, r24
	return ADC;
     ee2:	e4 e2       	ldi	r30, 0x24	; 36
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
}
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DcMotor_Init>:
#include "DC_motor.h"
#include "PWM.h"
void DcMotor_Init(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SetupPinDirection(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,OUTPUT_PIN);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>
	SetupPinDirection(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,OUTPUT_PIN);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>


	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
	Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>


}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DcMotor_Rotate+0x6>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <DcMotor_Rotate+0x8>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	6a 83       	std	Y+2, r22	; 0x02
switch(state)
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3c 83       	std	Y+4, r19	; 0x04
     f40:	2b 83       	std	Y+3, r18	; 0x03
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	b9 f0       	breq	.+46     	; 0xf7a <DcMotor_Rotate+0x52>
     f4c:	2b 81       	ldd	r18, Y+3	; 0x03
     f4e:	3c 81       	ldd	r19, Y+4	; 0x04
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	01 f1       	breq	.+64     	; 0xf96 <DcMotor_Rotate+0x6e>
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	49 f5       	brne	.+82     	; 0xfb0 <DcMotor_Rotate+0x88>
{
case OFF:
	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		PWM_Timer0_START(speed);
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <PWM_Timer0_START>
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <DcMotor_Rotate+0x88>
		break;
case CW:
	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		PWM_Timer0_START(speed);
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <PWM_Timer0_START>
     f94:	0d c0       	rjmp	.+26     	; 0xfb0 <DcMotor_Rotate+0x88>
		break;
case A_CW:
	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
		PWM_Timer0_START(speed);
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <PWM_Timer0_START>
		break;
}
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <LCD_init>:
#include <util/delay.h>
#include <stdlib.h>

#include "My_GPIO.h"
void LCD_init(void)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	2e 97       	sbiw	r28, 0x0e	; 14
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
	SetupPinDirection(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,OUTPUT_PIN);
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>
	SetupPinDirection(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,OUTPUT_PIN);
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 ea       	ldi	r26, 0xA0	; 160
     fec:	b1 e4       	ldi	r27, 0x41	; 65
     fee:	8b 87       	std	Y+11, r24	; 0x0b
     ff0:	9c 87       	std	Y+12, r25	; 0x0c
     ff2:	ad 87       	std	Y+13, r26	; 0x0d
     ff4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a e7       	ldi	r20, 0x7A	; 122
    1004:	53 e4       	ldi	r21, 0x43	; 67
    1006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	8f 83       	std	Y+7, r24	; 0x07
    1010:	98 87       	std	Y+8, r25	; 0x08
    1012:	a9 87       	std	Y+9, r26	; 0x09
    1014:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1016:	6f 81       	ldd	r22, Y+7	; 0x07
    1018:	78 85       	ldd	r23, Y+8	; 0x08
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	5f e3       	ldi	r21, 0x3F	; 63
    1026:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    102a:	88 23       	and	r24, r24
    102c:	2c f4       	brge	.+10     	; 0x1038 <LCD_init+0x7a>
		__ticks = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	3f c0       	rjmp	.+126    	; 0x10b6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1038:	6f 81       	ldd	r22, Y+7	; 0x07
    103a:	78 85       	ldd	r23, Y+8	; 0x08
    103c:	89 85       	ldd	r24, Y+9	; 0x09
    103e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	57 e4       	ldi	r21, 0x47	; 71
    1048:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    104c:	18 16       	cp	r1, r24
    104e:	4c f5       	brge	.+82     	; 0x10a2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	6b 85       	ldd	r22, Y+11	; 0x0b
    1052:	7c 85       	ldd	r23, Y+12	; 0x0c
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	9e 85       	ldd	r25, Y+14	; 0x0e
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <LCD_init+0xda>
    107a:	89 e1       	ldi	r24, 0x19	; 25
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <LCD_init+0xc8>
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	9e 83       	std	Y+6, r25	; 0x06
    1096:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	69 f7       	brne	.-38     	; 0x107a <LCD_init+0xbc>
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a2:	6f 81       	ldd	r22, Y+7	; 0x07
    10a4:	78 85       	ldd	r23, Y+8	; 0x08
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <LCD_init+0x104>
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
	SetupPinDirection(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,OUTPUT_PIN);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#elif (LCD_DATA_BITS_MODE==8)
	SetupPortDirection(DATA_BUS_PORT_ID,OUTPUT_PORT);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SetupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    10d2:	88 e3       	ldi	r24, 0x38	; 56
    10d4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    10d8:	8c e0       	ldi	r24, 0x0C	; 12
    10da:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_sendCommand>

}
    10e4:	2e 96       	adiw	r28, 0x0e	; 14
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <LCD_sendCommand>:



void LCD_sendCommand (uint8 command)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	6d 97       	sbiw	r28, 0x1d	; 29
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	8d 8f       	std	Y+29, r24	; 0x1d
	Write_Pin(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,LOGIC_LOW);
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a0 e8       	ldi	r26, 0x80	; 128
    111c:	bf e3       	ldi	r27, 0x3F	; 63
    111e:	89 8f       	std	Y+25, r24	; 0x19
    1120:	9a 8f       	std	Y+26, r25	; 0x1a
    1122:	ab 8f       	std	Y+27, r26	; 0x1b
    1124:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1126:	69 8d       	ldd	r22, Y+25	; 0x19
    1128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	4a e7       	ldi	r20, 0x7A	; 122
    1134:	53 e4       	ldi	r21, 0x43	; 67
    1136:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	8d 8b       	std	Y+21, r24	; 0x15
    1140:	9e 8b       	std	Y+22, r25	; 0x16
    1142:	af 8b       	std	Y+23, r26	; 0x17
    1144:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1146:	6d 89       	ldd	r22, Y+21	; 0x15
    1148:	7e 89       	ldd	r23, Y+22	; 0x16
    114a:	8f 89       	ldd	r24, Y+23	; 0x17
    114c:	98 8d       	ldd	r25, Y+24	; 0x18
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e8       	ldi	r20, 0x80	; 128
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    115a:	88 23       	and	r24, r24
    115c:	2c f4       	brge	.+10     	; 0x1168 <LCD_sendCommand+0x72>
		__ticks = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 8b       	std	Y+20, r25	; 0x14
    1164:	8b 8b       	std	Y+19, r24	; 0x13
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1168:	6d 89       	ldd	r22, Y+21	; 0x15
    116a:	7e 89       	ldd	r23, Y+22	; 0x16
    116c:	8f 89       	ldd	r24, Y+23	; 0x17
    116e:	98 8d       	ldd	r25, Y+24	; 0x18
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    117c:	18 16       	cp	r1, r24
    117e:	4c f5       	brge	.+82     	; 0x11d2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	69 8d       	ldd	r22, Y+25	; 0x19
    1182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9c 8b       	std	Y+20, r25	; 0x14
    11a6:	8b 8b       	std	Y+19, r24	; 0x13
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <LCD_sendCommand+0xd2>
    11aa:	89 e1       	ldi	r24, 0x19	; 25
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9a 8b       	std	Y+18, r25	; 0x12
    11b0:	89 8b       	std	Y+17, r24	; 0x11
    11b2:	89 89       	ldd	r24, Y+17	; 0x11
    11b4:	9a 89       	ldd	r25, Y+18	; 0x12
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <LCD_sendCommand+0xc0>
    11ba:	9a 8b       	std	Y+18, r25	; 0x12
    11bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11be:	8b 89       	ldd	r24, Y+19	; 0x13
    11c0:	9c 89       	ldd	r25, Y+20	; 0x14
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9c 8b       	std	Y+20, r25	; 0x14
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ca:	9c 89       	ldd	r25, Y+20	; 0x14
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	69 f7       	brne	.-38     	; 0x11aa <LCD_sendCommand+0xb4>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d2:	6d 89       	ldd	r22, Y+21	; 0x15
    11d4:	7e 89       	ldd	r23, Y+22	; 0x16
    11d6:	8f 89       	ldd	r24, Y+23	; 0x17
    11d8:	98 8d       	ldd	r25, Y+24	; 0x18
    11da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	9c 8b       	std	Y+20, r25	; 0x14
    11e4:	8b 8b       	std	Y+19, r24	; 0x13
    11e6:	8b 89       	ldd	r24, Y+19	; 0x13
    11e8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
    11ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f0:	98 89       	ldd	r25, Y+16	; 0x10
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <LCD_sendCommand+0xfc>
    11f6:	98 8b       	std	Y+16, r25	; 0x10
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_HIGH);
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	62 e0       	ldi	r22, 0x02	; 2
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e8       	ldi	r26, 0x80	; 128
    120a:	bf e3       	ldi	r27, 0x3F	; 63
    120c:	8b 87       	std	Y+11, r24	; 0x0b
    120e:	9c 87       	std	Y+12, r25	; 0x0c
    1210:	ad 87       	std	Y+13, r26	; 0x0d
    1212:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	98 87       	std	Y+8, r25	; 0x08
    1230:	a9 87       	std	Y+9, r26	; 0x09
    1232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f4       	brge	.+10     	; 0x1256 <LCD_sendCommand+0x160>
		__ticks = 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1256:	6f 81       	ldd	r22, Y+7	; 0x07
    1258:	78 85       	ldd	r23, Y+8	; 0x08
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	4c f5       	brge	.+82     	; 0x12c0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <LCD_sendCommand+0x1c0>
    1298:	89 e1       	ldi	r24, 0x19	; 25
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <LCD_sendCommand+0x1ae>
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f7       	brne	.-38     	; 0x1298 <LCD_sendCommand+0x1a2>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c0:	6f 81       	ldd	r22, Y+7	; 0x07
    12c2:	78 85       	ldd	r23, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <LCD_sendCommand+0x1ea>
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN2_ID,GET_BIT(command,2));
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,GET_BIT(command,3));
_delay_ms(1);
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
#elif (LCD_DATA_BITS_MODE==8)
Write_Port(DATA_BUS_PORT_ID,command);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12ec:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <Write_Port>
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
#endif
}
    12fa:	6d 96       	adiw	r28, 0x1d	; 29
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <LCD_sendCharacter>:
void LCD_sendCharacter (uint8 character)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	6d 97       	sbiw	r28, 0x1d	; 29
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8d 8f       	std	Y+29, r24	; 0x1d
	Write_Pin(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,LOGIC_HIGH);
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e8       	ldi	r26, 0x80	; 128
    1332:	bf e3       	ldi	r27, 0x3F	; 63
    1334:	89 8f       	std	Y+25, r24	; 0x19
    1336:	9a 8f       	std	Y+26, r25	; 0x1a
    1338:	ab 8f       	std	Y+27, r26	; 0x1b
    133a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133c:	69 8d       	ldd	r22, Y+25	; 0x19
    133e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a e7       	ldi	r20, 0x7A	; 122
    134a:	53 e4       	ldi	r21, 0x43	; 67
    134c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8d 8b       	std	Y+21, r24	; 0x15
    1356:	9e 8b       	std	Y+22, r25	; 0x16
    1358:	af 8b       	std	Y+23, r26	; 0x17
    135a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	2c f4       	brge	.+10     	; 0x137e <LCD_sendCharacter+0x72>
		__ticks = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <LCD_sendCharacter+0xf0>
	else if (__tmp > 65535)
    137e:	6d 89       	ldd	r22, Y+21	; 0x15
    1380:	7e 89       	ldd	r23, Y+22	; 0x16
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	4c f5       	brge	.+82     	; 0x13e8 <LCD_sendCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1396:	69 8d       	ldd	r22, Y+25	; 0x19
    1398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    139c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9c 8b       	std	Y+20, r25	; 0x14
    13bc:	8b 8b       	std	Y+19, r24	; 0x13
    13be:	0f c0       	rjmp	.+30     	; 0x13de <LCD_sendCharacter+0xd2>
    13c0:	89 e1       	ldi	r24, 0x19	; 25
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9a 8b       	std	Y+18, r25	; 0x12
    13c6:	89 8b       	std	Y+17, r24	; 0x11
    13c8:	89 89       	ldd	r24, Y+17	; 0x11
    13ca:	9a 89       	ldd	r25, Y+18	; 0x12
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <LCD_sendCharacter+0xc0>
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	8b 89       	ldd	r24, Y+19	; 0x13
    13d6:	9c 89       	ldd	r25, Y+20	; 0x14
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	9c 8b       	std	Y+20, r25	; 0x14
    13dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	8b 89       	ldd	r24, Y+19	; 0x13
    13e0:	9c 89       	ldd	r25, Y+20	; 0x14
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f7       	brne	.-38     	; 0x13c0 <LCD_sendCharacter+0xb4>
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <LCD_sendCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ea:	7e 89       	ldd	r23, Y+22	; 0x16
    13ec:	8f 89       	ldd	r24, Y+23	; 0x17
    13ee:	98 8d       	ldd	r25, Y+24	; 0x18
    13f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	9c 8b       	std	Y+20, r25	; 0x14
    13fa:	8b 8b       	std	Y+19, r24	; 0x13
    13fc:	8b 89       	ldd	r24, Y+19	; 0x13
    13fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1400:	98 8b       	std	Y+16, r25	; 0x10
    1402:	8f 87       	std	Y+15, r24	; 0x0f
    1404:	8f 85       	ldd	r24, Y+15	; 0x0f
    1406:	98 89       	ldd	r25, Y+16	; 0x10
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <LCD_sendCharacter+0xfc>
    140c:	98 8b       	std	Y+16, r25	; 0x10
    140e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_HIGH);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 e8       	ldi	r26, 0x80	; 128
    1420:	bf e3       	ldi	r27, 0x3F	; 63
    1422:	8b 87       	std	Y+11, r24	; 0x0b
    1424:	9c 87       	std	Y+12, r25	; 0x0c
    1426:	ad 87       	std	Y+13, r26	; 0x0d
    1428:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a e7       	ldi	r20, 0x7A	; 122
    1438:	53 e4       	ldi	r21, 0x43	; 67
    143a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8f 83       	std	Y+7, r24	; 0x07
    1444:	98 87       	std	Y+8, r25	; 0x08
    1446:	a9 87       	std	Y+9, r26	; 0x09
    1448:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	2c f4       	brge	.+10     	; 0x146c <LCD_sendCharacter+0x160>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <LCD_sendCharacter+0x1de>
	else if (__tmp > 65535)
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	4c f5       	brge	.+82     	; 0x14d6 <LCD_sendCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1484:	6b 85       	ldd	r22, Y+11	; 0x0b
    1486:	7c 85       	ldd	r23, Y+12	; 0x0c
    1488:	8d 85       	ldd	r24, Y+13	; 0x0d
    148a:	9e 85       	ldd	r25, Y+14	; 0x0e
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <LCD_sendCharacter+0x1c0>
    14ae:	89 e1       	ldi	r24, 0x19	; 25
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_sendCharacter+0x1ae>
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f7       	brne	.-38     	; 0x14ae <LCD_sendCharacter+0x1a2>
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <LCD_sendCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	6f 81       	ldd	r22, Y+7	; 0x07
    14d8:	78 85       	ldd	r23, Y+8	; 0x08
    14da:	89 85       	ldd	r24, Y+9	; 0x09
    14dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <LCD_sendCharacter+0x1ea>
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN2_ID,GET_BIT(character,2));
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,GET_BIT(character,3));
_delay_ms(1);
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
#elif (LCD_DATA_BITS_MODE==8)
Write_Port(DATA_BUS_PORT_ID,character);
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1502:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <Write_Port>
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
#endif
}
    1510:	6d 96       	adiw	r28, 0x1d	; 29
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <LCD_sendString>:


void LCD_sendString(const char *sptr)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <LCD_sendString+0x6>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <LCD_sendString+0x24>
	while(*sptr!='\0')
	{
		LCD_sendCharacter(*sptr);
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 81       	ld	r24, Z
    1538:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
		sptr++;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_sendString(const char *sptr)
{
	while(*sptr!='\0')
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	80 81       	ld	r24, Z
    154c:	88 23       	and	r24, r24
    154e:	89 f7       	brne	.-30     	; 0x1532 <LCD_sendString+0x10>
	{
		LCD_sendCharacter(*sptr);
		sptr++;
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <LCD_moveCursor+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <LCD_moveCursor+0x8>
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8a 83       	std	Y+2, r24	; 0x02
    156a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3d 83       	std	Y+5, r19	; 0x05
    1574:	2c 83       	std	Y+4, r18	; 0x04
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	c1 f0       	breq	.+48     	; 0x15b0 <LCD_moveCursor+0x56>
    1580:	2c 81       	ldd	r18, Y+4	; 0x04
    1582:	3d 81       	ldd	r19, Y+5	; 0x05
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <LCD_moveCursor+0x3a>
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 f0       	breq	.+24     	; 0x15aa <LCD_moveCursor+0x50>
    1592:	19 c0       	rjmp	.+50     	; 0x15c6 <LCD_moveCursor+0x6c>
    1594:	2c 81       	ldd	r18, Y+4	; 0x04
    1596:	3d 81       	ldd	r19, Y+5	; 0x05
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	69 f0       	breq	.+26     	; 0x15b8 <LCD_moveCursor+0x5e>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <LCD_moveCursor+0x66>
    15a8:	0e c0       	rjmp	.+28     	; 0x15c6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	0b c0       	rjmp	.+22     	; 0x15c6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	80 5c       	subi	r24, 0xC0	; 192
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	80 5f       	subi	r24, 0xF0	; 240
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	80 5b       	subi	r24, 0xB0	; 176
    15c4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_sendCommand>
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <LCD_displayStringRowColumn+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <LCD_displayStringRowColumn+0x8>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6a 83       	std	Y+2, r22	; 0x02
    15ee:	5c 83       	std	Y+4, r21	; 0x04
    15f0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	6a 81       	ldd	r22, Y+2	; 0x02
    15f6:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
	LCD_sendString(Str); /* display the string */
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_sendString>
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	62 97       	sbiw	r28, 0x12	; 18
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	9a 8b       	std	Y+18, r25	; 0x12
    1626:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1628:	89 89       	ldd	r24, Y+17	; 0x11
    162a:	9a 89       	ldd	r25, Y+18	; 0x12
    162c:	9e 01       	movw	r18, r28
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	b9 01       	movw	r22, r18
    1634:	4a e0       	ldi	r20, 0x0A	; 10
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	0e 94 33 10 	call	0x2066	; 0x2066 <itoa>
   LCD_sendString(buff); /* Display the string */
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_sendString>
}
    1644:	62 96       	adiw	r28, 0x12	; 18
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_sendCommand>
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <SetupPinDirection>:
#include "My_GPIO.h"

//pin input or output direction
//if number of port or the number of pins invalid ,do nothing
void SetupPinDirection(uint8 port_num,uint8 pin_num,uint8 direction)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <SetupPinDirection+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <SetupPinDirection+0x8>
    1672:	0f 92       	push	r0
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	6a 83       	std	Y+2, r22	; 0x02
    167c:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3d 83       	std	Y+5, r19	; 0x05
    1686:	2c 83       	std	Y+4, r18	; 0x04
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <SetupPinDirection+0x2a>
    1692:	43 c0       	rjmp	.+134    	; 0x171a <SetupPinDirection+0xb0>
    1694:	2c 81       	ldd	r18, Y+4	; 0x04
    1696:	3d 81       	ldd	r19, Y+5	; 0x05
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <SetupPinDirection+0x3e>
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <SetupPinDirection+0x58>
    16a6:	bc c0       	rjmp	.+376    	; 0x1820 <SetupPinDirection+0x1b6>
    16a8:	2c 81       	ldd	r18, Y+4	; 0x04
    16aa:	3d 81       	ldd	r19, Y+5	; 0x05
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <SetupPinDirection+0x4a>
    16b2:	5f c0       	rjmp	.+190    	; 0x1772 <SetupPinDirection+0x108>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <SetupPinDirection+0x56>
    16be:	85 c0       	rjmp	.+266    	; 0x17ca <SetupPinDirection+0x160>
    16c0:	af c0       	rjmp	.+350    	; 0x1820 <SetupPinDirection+0x1b6>
	{
	case PORTA_ID:
		if(direction==OUTPUT_PIN)
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <SetupPinDirection+0x86>
		{
		SET_BIT(DDRA,pin_num);
    16c8:	aa e3       	ldi	r26, 0x3A	; 58
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ea e3       	ldi	r30, 0x3A	; 58
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <SetupPinDirection+0x7c>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <SetupPinDirection+0x78>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	98 c0       	rjmp	.+304    	; 0x1820 <SetupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRA,pin_num);
    16f0:	aa e3       	ldi	r26, 0x3A	; 58
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ea e3       	ldi	r30, 0x3A	; 58
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <SetupPinDirection+0xa4>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <SetupPinDirection+0xa0>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	83 c0       	rjmp	.+262    	; 0x1820 <SetupPinDirection+0x1b6>
		}
		break;
	case PORTB_ID:
		if(direction==OUTPUT_PIN)
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	a1 f4       	brne	.+40     	; 0x1748 <SetupPinDirection+0xde>
				{
				SET_BIT(DDRB,pin_num);
    1720:	a7 e3       	ldi	r26, 0x37	; 55
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e7 e3       	ldi	r30, 0x37	; 55
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <SetupPinDirection+0xd4>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <SetupPinDirection+0xd0>
    1742:	84 2b       	or	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	6c c0       	rjmp	.+216    	; 0x1820 <SetupPinDirection+0x1b6>
				}
				else
				{
					CLEAR_BIT(DDRB,pin_num);
    1748:	a7 e3       	ldi	r26, 0x37	; 55
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e7 e3       	ldi	r30, 0x37	; 55
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <SetupPinDirection+0xfc>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <SetupPinDirection+0xf8>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	57 c0       	rjmp	.+174    	; 0x1820 <SetupPinDirection+0x1b6>
				}
		break;
	case PORTC_ID:
		if(direction==OUTPUT_PIN)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	a1 f4       	brne	.+40     	; 0x17a0 <SetupPinDirection+0x136>
						{
						SET_BIT(DDRC,pin_num);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <SetupPinDirection+0x12c>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <SetupPinDirection+0x128>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	40 c0       	rjmp	.+128    	; 0x1820 <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRC,pin_num);
    17a0:	a4 e3       	ldi	r26, 0x34	; 52
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e4 e3       	ldi	r30, 0x34	; 52
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <SetupPinDirection+0x154>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <SetupPinDirection+0x150>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	2b c0       	rjmp	.+86     	; 0x1820 <SetupPinDirection+0x1b6>
						}
		break;
	case PORTD_ID:
		if(direction==OUTPUT_PIN)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <SetupPinDirection+0x18e>
						{
						SET_BIT(DDRD,pin_num);
    17d0:	a1 e3       	ldi	r26, 0x31	; 49
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e1 e3       	ldi	r30, 0x31	; 49
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <SetupPinDirection+0x184>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <SetupPinDirection+0x180>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRD,pin_num);
    17f8:	a1 e3       	ldi	r26, 0x31	; 49
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e1 e3       	ldi	r30, 0x31	; 49
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <SetupPinDirection+0x1ac>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <SetupPinDirection+0x1a8>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
						}
		break;
	}
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <Write_Pin>:

//pin HIGH or LOW direction
//if number of port or the number of pins invalid ,do nothing
void Write_Pin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <Write_Pin+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <Write_Pin+0x8>
    1838:	0f 92       	push	r0
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	6a 83       	std	Y+2, r22	; 0x02
    1842:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3d 83       	std	Y+5, r19	; 0x05
    184c:	2c 83       	std	Y+4, r18	; 0x04
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <Write_Pin+0x2a>
    1858:	43 c0       	rjmp	.+134    	; 0x18e0 <Write_Pin+0xb0>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	2c f4       	brge	.+10     	; 0x186e <Write_Pin+0x3e>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	71 f0       	breq	.+28     	; 0x1888 <Write_Pin+0x58>
    186c:	bc c0       	rjmp	.+376    	; 0x19e6 <Write_Pin+0x1b6>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <Write_Pin+0x4a>
    1878:	5f c0       	rjmp	.+190    	; 0x1938 <Write_Pin+0x108>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <Write_Pin+0x56>
    1884:	85 c0       	rjmp	.+266    	; 0x1990 <Write_Pin+0x160>
    1886:	af c0       	rjmp	.+350    	; 0x19e6 <Write_Pin+0x1b6>
	{
	case PORTA_ID:
		if(value==LOGIC_HIGH)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	a1 f4       	brne	.+40     	; 0x18b6 <Write_Pin+0x86>
		{	SET_BIT(PORTA,pin_num);}
    188e:	ab e3       	ldi	r26, 0x3B	; 59
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	eb e3       	ldi	r30, 0x3B	; 59
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <Write_Pin+0x7c>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <Write_Pin+0x78>
    18b0:	84 2b       	or	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	98 c0       	rjmp	.+304    	; 0x19e6 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTA,pin_num);}
    18b6:	ab e3       	ldi	r26, 0x3B	; 59
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	eb e3       	ldi	r30, 0x3B	; 59
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <Write_Pin+0xa4>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <Write_Pin+0xa0>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	83 c0       	rjmp	.+262    	; 0x19e6 <Write_Pin+0x1b6>
		break;
	case PORTB_ID:
		if(value==LOGIC_HIGH)
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	a1 f4       	brne	.+40     	; 0x190e <Write_Pin+0xde>
		{	SET_BIT(PORTB,pin_num);}
    18e6:	a8 e3       	ldi	r26, 0x38	; 56
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <Write_Pin+0xd4>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <Write_Pin+0xd0>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	6c c0       	rjmp	.+216    	; 0x19e6 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTB,pin_num);}
    190e:	a8 e3       	ldi	r26, 0x38	; 56
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e3       	ldi	r30, 0x38	; 56
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <Write_Pin+0xfc>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <Write_Pin+0xf8>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	57 c0       	rjmp	.+174    	; 0x19e6 <Write_Pin+0x1b6>
		break;
	case PORTC_ID:
		if(value==LOGIC_HIGH)
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	a1 f4       	brne	.+40     	; 0x1966 <Write_Pin+0x136>
		{	SET_BIT(PORTC,pin_num);}
    193e:	a5 e3       	ldi	r26, 0x35	; 53
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e3       	ldi	r30, 0x35	; 53
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <Write_Pin+0x12c>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <Write_Pin+0x128>
    1960:	84 2b       	or	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	40 c0       	rjmp	.+128    	; 0x19e6 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTC,pin_num);}
    1966:	a5 e3       	ldi	r26, 0x35	; 53
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e3       	ldi	r30, 0x35	; 53
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <Write_Pin+0x154>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <Write_Pin+0x150>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	2b c0       	rjmp	.+86     	; 0x19e6 <Write_Pin+0x1b6>
		break;
	case PORTD_ID:
		if(value==LOGIC_HIGH)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	a1 f4       	brne	.+40     	; 0x19be <Write_Pin+0x18e>
		{	SET_BIT(PORTD,pin_num);}
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <Write_Pin+0x184>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <Write_Pin+0x180>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTD,pin_num);}
    19be:	a2 e3       	ldi	r26, 0x32	; 50
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e2 e3       	ldi	r30, 0x32	; 50
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <Write_Pin+0x1ac>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <Write_Pin+0x1a8>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
		break;
	}
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <Read_Pin>:
//return the value of pin_num
//if number of port or the number of pins invalid ,return 0
uint8 Read_Pin(uint8 port_num ,uint8 pin_num)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <Read_Pin+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <Read_Pin+0x8>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	8a 83       	std	Y+2, r24	; 0x02
    1a06:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pinvalue=0;
    1a08:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	4c 81       	ldd	r20, Y+4	; 0x04
    1a16:	5d 81       	ldd	r21, Y+5	; 0x05
    1a18:	41 30       	cpi	r20, 0x01	; 1
    1a1a:	51 05       	cpc	r21, r1
    1a1c:	71 f1       	breq	.+92     	; 0x1a7a <Read_Pin+0x84>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	34 f4       	brge	.+12     	; 0x1a34 <Read_Pin+0x3e>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	69 f0       	breq	.+26     	; 0x1a4c <Read_Pin+0x56>
    1a32:	64 c0       	rjmp	.+200    	; 0x1afc <Read_Pin+0x106>
    1a34:	4c 81       	ldd	r20, Y+4	; 0x04
    1a36:	5d 81       	ldd	r21, Y+5	; 0x05
    1a38:	42 30       	cpi	r20, 0x02	; 2
    1a3a:	51 05       	cpc	r21, r1
    1a3c:	a1 f1       	breq	.+104    	; 0x1aa6 <Read_Pin+0xb0>
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	91 05       	cpc	r25, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <Read_Pin+0x54>
    1a48:	44 c0       	rjmp	.+136    	; 0x1ad2 <Read_Pin+0xdc>
    1a4a:	58 c0       	rjmp	.+176    	; 0x1afc <Read_Pin+0x106>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin_num)){pinvalue=1;}
    1a4c:	e9 e3       	ldi	r30, 0x39	; 57
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <Read_Pin+0x6e>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <Read_Pin+0x6a>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <Read_Pin+0x7e>
    1a72:	44 c0       	rjmp	.+136    	; 0x1afc <Read_Pin+0x106>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	41 c0       	rjmp	.+130    	; 0x1afc <Read_Pin+0x106>
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin_num)){pinvalue=1;}
    1a7a:	e6 e3       	ldi	r30, 0x36	; 54
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <Read_Pin+0x9c>
    1a8e:	55 95       	asr	r21
    1a90:	47 95       	ror	r20
    1a92:	8a 95       	dec	r24
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <Read_Pin+0x98>
    1a96:	ca 01       	movw	r24, r20
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	88 23       	and	r24, r24
    1a9e:	71 f1       	breq	.+92     	; 0x1afc <Read_Pin+0x106>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	2b c0       	rjmp	.+86     	; 0x1afc <Read_Pin+0x106>
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin_num)){pinvalue=1;}
    1aa6:	e3 e3       	ldi	r30, 0x33	; 51
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <Read_Pin+0xc8>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <Read_Pin+0xc4>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	c1 f0       	breq	.+48     	; 0x1afc <Read_Pin+0x106>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	15 c0       	rjmp	.+42     	; 0x1afc <Read_Pin+0x106>
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin_num)){pinvalue=1;}
    1ad2:	e0 e3       	ldi	r30, 0x30	; 48
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a9 01       	movw	r20, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <Read_Pin+0xf4>
    1ae6:	55 95       	asr	r21
    1ae8:	47 95       	ror	r20
    1aea:	8a 95       	dec	r24
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <Read_Pin+0xf0>
    1aee:	ca 01       	movw	r24, r20
    1af0:	81 70       	andi	r24, 0x01	; 1
    1af2:	90 70       	andi	r25, 0x00	; 0
    1af4:	88 23       	and	r24, r24
    1af6:	11 f0       	breq	.+4      	; 0x1afc <Read_Pin+0x106>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pinvalue;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <SetupPortDirection>:

//port input or output direction
//if number of port invalid ,do nothing
void SetupPortDirection(uint8 port_num ,uint8 direction)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <SetupPortDirection+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <SetupPortDirection+0x8>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3c 83       	std	Y+4, r19	; 0x04
    1b26:	2b 83       	std	Y+3, r18	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <SetupPortDirection+0x58>
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	31 05       	cpc	r19, r1
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <SetupPortDirection+0x38>
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <SetupPortDirection+0x4e>
    1b44:	1e c0       	rjmp	.+60     	; 0x1b82 <SetupPortDirection+0x74>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	81 f0       	breq	.+32     	; 0x1b70 <SetupPortDirection+0x62>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	83 30       	cpi	r24, 0x03	; 3
    1b56:	91 05       	cpc	r25, r1
    1b58:	81 f0       	breq	.+32     	; 0x1b7a <SetupPortDirection+0x6c>
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <SetupPortDirection+0x74>
	{
	case PORTA_ID:
		DDRA=direction;
    1b5c:	ea e3       	ldi	r30, 0x3A	; 58
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	80 83       	st	Z, r24
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <SetupPortDirection+0x74>
		break;
	case PORTB_ID:
		DDRB=direction;
    1b66:	e7 e3       	ldi	r30, 0x37	; 55
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	80 83       	st	Z, r24
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <SetupPortDirection+0x74>
		break;
	case PORTC_ID:
		DDRC=direction;
    1b70:	e4 e3       	ldi	r30, 0x34	; 52
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	80 83       	st	Z, r24
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <SetupPortDirection+0x74>
		break;
	case PORTD_ID:
		DDRD=direction;
    1b7a:	e1 e3       	ldi	r30, 0x31	; 49
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	80 83       	st	Z, r24
		break;
	}
}
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <Write_Port>:

//port HIGH or LOW
//if number of port invalid ,do nothing
void Write_Port(uint8 port_num ,uint8 value)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <Write_Port+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <Write_Port+0x8>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	d1 f0       	breq	.+52     	; 0x1be8 <Write_Port+0x58>
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <Write_Port+0x38>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <Write_Port+0x4e>
    1bc6:	1e c0       	rjmp	.+60     	; 0x1c04 <Write_Port+0x74>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <Write_Port+0x62>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <Write_Port+0x6c>
    1bdc:	13 c0       	rjmp	.+38     	; 0x1c04 <Write_Port+0x74>
	{
	case PORTA_ID:
		PORTA=value;
    1bde:	eb e3       	ldi	r30, 0x3B	; 59
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <Write_Port+0x74>
		break;
	case PORTB_ID:
		PORTB=value;
    1be8:	e8 e3       	ldi	r30, 0x38	; 56
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <Write_Port+0x74>
		break;
	case PORTC_ID:
		PORTC=value;
    1bf2:	e5 e3       	ldi	r30, 0x35	; 53
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <Write_Port+0x74>
		break;
	case PORTD_ID:
		PORTD=value;
    1bfc:	e2 e3       	ldi	r30, 0x32	; 50
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	80 83       	st	Z, r24
		break;
	}
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <Read_Port>:

//return the vlaue of port
//if number of port invalid ,return 0
uint8 Read_Port(uint8 port_num)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <Read_Port+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <Read_Port+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portvalue=0;
    1c20:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}
	switch(port_num)
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <Read_Port+0x58>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <Read_Port+0x38>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <Read_Port+0x4e>
    1c48:	1e c0       	rjmp	.+60     	; 0x1c86 <Read_Port+0x74>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <Read_Port+0x62>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <Read_Port+0x6c>
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <Read_Port+0x74>
	{
	case PORTA_ID:
		portvalue=PINA;
    1c60:	e9 e3       	ldi	r30, 0x39	; 57
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <Read_Port+0x74>
		break;
	case PORTB_ID:
		portvalue=PINB;
    1c6a:	e6 e3       	ldi	r30, 0x36	; 54
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <Read_Port+0x74>
		break;
	case PORTC_ID:
		portvalue=PINC;
    1c74:	e3 e3       	ldi	r30, 0x33	; 51
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <Read_Port+0x74>
		break;
	case PORTD_ID:
		portvalue=PIND;
    1c7e:	e0 e3       	ldi	r30, 0x30	; 48
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return portvalue;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <PWM_Timer0_START>:
#include <avr/io.h>
#include "PWM.h"
void PWM_Timer0_START(uint8 set_duty_cycle)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1ca2:	e2 e5       	ldi	r30, 0x52	; 82
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    1ca8:	ec e5       	ldi	r30, 0x5C	; 92
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	80 83       	st	Z, r24

	SetupPinDirection(PWM_PORT_ID,PWM_PIN_ID,OUTPUT_PIN);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1cba:	e3 e5       	ldi	r30, 0x53	; 83
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8a e6       	ldi	r24, 0x6A	; 106
    1cc0:	80 83       	st	Z, r24
}
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <main>:
#include "DC_motor.h"
#include "My_GPIO.h"
#include "std_types.h"
#include "common_macros.h"
int main(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <main+0x6>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
	uint8 Temp;
	ADC_ConfigType ADC_configuration={internal_v,F_CPU_8};
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
	SetupPinDirection(PORTD_ID,PIN1_ID,OUTPUT_PIN);
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 35 0b 	call	0x166a	; 0x166a <SetupPinDirection>
	Write_Pin(PORTD_ID,PIN1_ID,LOGIC_LOW);
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	0e 94 18 0c 	call	0x1830	; 0x1830 <Write_Pin>
	LCD_init();
    1cf2:	0e 94 df 07 	call	0xfbe	; 0xfbe <LCD_init>
	ADC_init(&ADC_configuration);
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	DcMotor_Init();
    1cfe:	0e 94 79 07 	call	0xef2	; 0xef2 <DcMotor_Init>
	LCD_displayStringRowColumn(0,4,"Fan is    ");
    1d02:	20 e6       	ldi	r18, 0x60	; 96
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	64 e0       	ldi	r22, 0x04	; 4
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Temp=     C");
    1d10:	2b e6       	ldi	r18, 0x6B	; 107
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	64 e0       	ldi	r22, 0x04	; 4
    1d18:	a9 01       	movw	r20, r18
    1d1a:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
	while(1)
	{
		Temp =LM35_getTemperature();
    1d1e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LM35_getTemperature>
    1d22:	89 83       	std	Y+1, r24	; 0x01

		//less than 30c
		if(Temp<30)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	8e 31       	cpi	r24, 0x1E	; 30
    1d28:	b8 f4       	brcc	.+46     	; 0x1d58 <main+0x8e>
		{
			DcMotor_Rotate(OFF,0);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	0e 94 94 07 	call	0xf28	; 0xf28 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"OFF ");
    1d32:	27 e7       	ldi	r18, 0x77	; 119
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	6b e0       	ldi	r22, 0x0B	; 11
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	6a e0       	ldi	r22, 0x0A	; 10
    1d44:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
			{
				LCD_intgerToString(Temp);
			}
			else
			{
				LCD_intgerToString(Temp);
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_intgerToString>
				LCD_sendCharacter(' ');
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
			}
		}

		//equal or greater then 30c or and less then 60c
		if((Temp>=30) && (Temp<60))
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	8e 31       	cpi	r24, 0x1E	; 30
    1d5c:	d0 f0       	brcs	.+52     	; 0x1d92 <main+0xc8>
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	8c 33       	cpi	r24, 0x3C	; 60
    1d62:	b8 f4       	brcc	.+46     	; 0x1d92 <main+0xc8>
		{
			DcMotor_Rotate(CW,64);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	60 e4       	ldi	r22, 0x40	; 64
    1d68:	0e 94 94 07 	call	0xf28	; 0xf28 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON   ");
    1d6c:	2c e7       	ldi	r18, 0x7C	; 124
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	6b e0       	ldi	r22, 0x0B	; 11
    1d74:	a9 01       	movw	r20, r18
    1d76:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	6a e0       	ldi	r22, 0x0A	; 10
    1d7e:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
			{
				LCD_intgerToString(Temp);
			}
			else
			{
				LCD_intgerToString(Temp);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_intgerToString>
				LCD_sendCharacter(' ');
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
			}}


		//equal or greater then 60c or and less then 90c
		if((Temp>=60) && (Temp<90))
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	8c 33       	cpi	r24, 0x3C	; 60
    1d96:	d0 f0       	brcs	.+52     	; 0x1dcc <main+0x102>
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	8a 35       	cpi	r24, 0x5A	; 90
    1d9c:	b8 f4       	brcc	.+46     	; 0x1dcc <main+0x102>
		{
			DcMotor_Rotate(CW,128);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	60 e8       	ldi	r22, 0x80	; 128
    1da2:	0e 94 94 07 	call	0xf28	; 0xf28 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON   ");
    1da6:	2c e7       	ldi	r18, 0x7C	; 124
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	6b e0       	ldi	r22, 0x0B	; 11
    1dae:	a9 01       	movw	r20, r18
    1db0:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	6a e0       	ldi	r22, 0x0A	; 10
    1db8:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
			{
				LCD_intgerToString(Temp);
			}
			else
			{
				LCD_intgerToString(Temp);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_intgerToString>
				LCD_sendCharacter(' ');
    1dc6:	80 e2       	ldi	r24, 0x20	; 32
    1dc8:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
			}
		}

		//equal or greater then 90c or and less then 120c
		if((Temp>=90) && (Temp<120))
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	8a 35       	cpi	r24, 0x5A	; 90
    1dd0:	d0 f0       	brcs	.+52     	; 0x1e06 <main+0x13c>
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	88 37       	cpi	r24, 0x78	; 120
    1dd6:	b8 f4       	brcc	.+46     	; 0x1e06 <main+0x13c>
		{
			DcMotor_Rotate(CW,192);
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	60 ec       	ldi	r22, 0xC0	; 192
    1ddc:	0e 94 94 07 	call	0xf28	; 0xf28 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON   ");
    1de0:	2c e7       	ldi	r18, 0x7C	; 124
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	6b e0       	ldi	r22, 0x0B	; 11
    1de8:	a9 01       	movw	r20, r18
    1dea:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	6a e0       	ldi	r22, 0x0A	; 10
    1df2:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
			{
				LCD_intgerToString(Temp);
			}
			else
			{
				LCD_intgerToString(Temp);
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_intgerToString>
				LCD_sendCharacter(' ');
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
			}
		}

		//equal or greater then 120c
		if((Temp>=120))
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 37       	cpi	r24, 0x78	; 120
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <main+0x144>
    1e0c:	88 cf       	rjmp	.-240    	; 0x1d1e <main+0x54>
		{
			DcMotor_Rotate(CW,255);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	6f ef       	ldi	r22, 0xFF	; 255
    1e12:	0e 94 94 07 	call	0xf28	; 0xf28 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON   ");
    1e16:	2c e7       	ldi	r18, 0x7C	; 124
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	6b e0       	ldi	r22, 0x0B	; 11
    1e1e:	a9 01       	movw	r20, r18
    1e20:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	6a e0       	ldi	r22, 0x0A	; 10
    1e28:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_moveCursor>
			{
				LCD_intgerToString(Temp);
			}
			else
			{
				LCD_intgerToString(Temp);
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_intgerToString>
				LCD_sendCharacter(' ');
    1e36:	80 e2       	ldi	r24, 0x20	; 32
    1e38:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_sendCharacter>
    1e3c:	70 cf       	rjmp	.-288    	; 0x1d1e <main+0x54>

00001e3e <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "ADC.h"


uint8 LM35_getTemperature(void)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	61 97       	sbiw	r28, 0x11	; 17
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
	uint8 temp_value = 0;
    1e52:	19 8a       	std	Y+17, r1	; 0x11
#if(ADC_MODE==ADC_pooling_mode)

		uint16 adc_value=0;
    1e54:	18 8a       	std	Y+16, r1	; 0x10
    1e56:	1f 86       	std	Y+15, r1	; 0x0f
	adc_value=ADC_readChannel(SENSOR_CHANNEL_ID);
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	0e 94 42 07 	call	0xe84	; 0xe84 <ADC_readChannel>
    1e5e:	98 8b       	std	Y+16, r25	; 0x10
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 ea       	ldi	r26, 0xA0	; 160
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	8b 87       	std	Y+11, r24	; 0x0b
    1e6c:	9c 87       	std	Y+12, r25	; 0x0c
    1e6e:	ad 87       	std	Y+13, r26	; 0x0d
    1e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	53 e4       	ldi	r21, 0x43	; 67
    1e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8f 83       	std	Y+7, r24	; 0x07
    1e8c:	98 87       	std	Y+8, r25	; 0x08
    1e8e:	a9 87       	std	Y+9, r26	; 0x09
    1e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LM35_getTemperature+0x76>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LM35_getTemperature+0xf4>
	else if (__tmp > 65535)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LM35_getTemperature+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LM35_getTemperature+0xd6>
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LM35_getTemperature+0xc4>
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LM35_getTemperature+0xb8>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LM35_getTemperature+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LM35_getTemperature+0x100>
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01

	temp_value = (uint8)(((uint32)data*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
#endif

#if(ADC_MODE==ADC_pooling_mode)
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1f46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f48:	98 89       	ldd	r25, Y+16	; 0x10
    1f4a:	cc 01       	movw	r24, r24
    1f4c:	a0 e0       	ldi	r26, 0x00	; 0
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	26 e9       	ldi	r18, 0x96	; 150
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__mulsi3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	2a e0       	ldi	r18, 0x0A	; 10
    1f76:	37 ed       	ldi	r19, 0xD7	; 215
    1f78:	43 e2       	ldi	r20, 0x23	; 35
    1f7a:	50 e4       	ldi	r21, 0x40	; 64
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 ed       	ldi	r19, 0xD0	; 208
    1f8c:	4f eb       	ldi	r20, 0xBF	; 191
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
#endif

	return temp_value;
    1fa6:	89 89       	ldd	r24, Y+17	; 0x11
}
    1fa8:	61 96       	adiw	r28, 0x11	; 17
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <__mulsi3>:
    1fba:	62 9f       	mul	r22, r18
    1fbc:	d0 01       	movw	r26, r0
    1fbe:	73 9f       	mul	r23, r19
    1fc0:	f0 01       	movw	r30, r0
    1fc2:	82 9f       	mul	r24, r18
    1fc4:	e0 0d       	add	r30, r0
    1fc6:	f1 1d       	adc	r31, r1
    1fc8:	64 9f       	mul	r22, r20
    1fca:	e0 0d       	add	r30, r0
    1fcc:	f1 1d       	adc	r31, r1
    1fce:	92 9f       	mul	r25, r18
    1fd0:	f0 0d       	add	r31, r0
    1fd2:	83 9f       	mul	r24, r19
    1fd4:	f0 0d       	add	r31, r0
    1fd6:	74 9f       	mul	r23, r20
    1fd8:	f0 0d       	add	r31, r0
    1fda:	65 9f       	mul	r22, r21
    1fdc:	f0 0d       	add	r31, r0
    1fde:	99 27       	eor	r25, r25
    1fe0:	72 9f       	mul	r23, r18
    1fe2:	b0 0d       	add	r27, r0
    1fe4:	e1 1d       	adc	r30, r1
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	63 9f       	mul	r22, r19
    1fea:	b0 0d       	add	r27, r0
    1fec:	e1 1d       	adc	r30, r1
    1fee:	f9 1f       	adc	r31, r25
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	11 24       	eor	r1, r1
    1ff6:	08 95       	ret

00001ff8 <__prologue_saves__>:
    1ff8:	2f 92       	push	r2
    1ffa:	3f 92       	push	r3
    1ffc:	4f 92       	push	r4
    1ffe:	5f 92       	push	r5
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ca 1b       	sub	r28, r26
    2022:	db 0b       	sbc	r29, r27
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	09 94       	ijmp

00002030 <__epilogue_restores__>:
    2030:	2a 88       	ldd	r2, Y+18	; 0x12
    2032:	39 88       	ldd	r3, Y+17	; 0x11
    2034:	48 88       	ldd	r4, Y+16	; 0x10
    2036:	5f 84       	ldd	r5, Y+15	; 0x0f
    2038:	6e 84       	ldd	r6, Y+14	; 0x0e
    203a:	7d 84       	ldd	r7, Y+13	; 0x0d
    203c:	8c 84       	ldd	r8, Y+12	; 0x0c
    203e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2040:	aa 84       	ldd	r10, Y+10	; 0x0a
    2042:	b9 84       	ldd	r11, Y+9	; 0x09
    2044:	c8 84       	ldd	r12, Y+8	; 0x08
    2046:	df 80       	ldd	r13, Y+7	; 0x07
    2048:	ee 80       	ldd	r14, Y+6	; 0x06
    204a:	fd 80       	ldd	r15, Y+5	; 0x05
    204c:	0c 81       	ldd	r16, Y+4	; 0x04
    204e:	1b 81       	ldd	r17, Y+3	; 0x03
    2050:	aa 81       	ldd	r26, Y+2	; 0x02
    2052:	b9 81       	ldd	r27, Y+1	; 0x01
    2054:	ce 0f       	add	r28, r30
    2056:	d1 1d       	adc	r29, r1
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	ed 01       	movw	r28, r26
    2064:	08 95       	ret

00002066 <itoa>:
    2066:	fb 01       	movw	r30, r22
    2068:	9f 01       	movw	r18, r30
    206a:	e8 94       	clt
    206c:	42 30       	cpi	r20, 0x02	; 2
    206e:	c4 f0       	brlt	.+48     	; 0x20a0 <itoa+0x3a>
    2070:	45 32       	cpi	r20, 0x25	; 37
    2072:	b4 f4       	brge	.+44     	; 0x20a0 <itoa+0x3a>
    2074:	4a 30       	cpi	r20, 0x0A	; 10
    2076:	29 f4       	brne	.+10     	; 0x2082 <itoa+0x1c>
    2078:	97 fb       	bst	r25, 7
    207a:	1e f4       	brtc	.+6      	; 0x2082 <itoa+0x1c>
    207c:	90 95       	com	r25
    207e:	81 95       	neg	r24
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	64 2f       	mov	r22, r20
    2084:	77 27       	eor	r23, r23
    2086:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__udivmodhi4>
    208a:	80 5d       	subi	r24, 0xD0	; 208
    208c:	8a 33       	cpi	r24, 0x3A	; 58
    208e:	0c f0       	brlt	.+2      	; 0x2092 <itoa+0x2c>
    2090:	89 5d       	subi	r24, 0xD9	; 217
    2092:	81 93       	st	Z+, r24
    2094:	cb 01       	movw	r24, r22
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	a1 f7       	brne	.-24     	; 0x2082 <itoa+0x1c>
    209a:	16 f4       	brtc	.+4      	; 0x20a0 <itoa+0x3a>
    209c:	5d e2       	ldi	r21, 0x2D	; 45
    209e:	51 93       	st	Z+, r21
    20a0:	10 82       	st	Z, r1
    20a2:	c9 01       	movw	r24, r18
    20a4:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <strrev>

000020a8 <strrev>:
    20a8:	dc 01       	movw	r26, r24
    20aa:	fc 01       	movw	r30, r24
    20ac:	67 2f       	mov	r22, r23
    20ae:	71 91       	ld	r23, Z+
    20b0:	77 23       	and	r23, r23
    20b2:	e1 f7       	brne	.-8      	; 0x20ac <strrev+0x4>
    20b4:	32 97       	sbiw	r30, 0x02	; 2
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <strrev+0x18>
    20b8:	7c 91       	ld	r23, X
    20ba:	6d 93       	st	X+, r22
    20bc:	70 83       	st	Z, r23
    20be:	62 91       	ld	r22, -Z
    20c0:	ae 17       	cp	r26, r30
    20c2:	bf 07       	cpc	r27, r31
    20c4:	c8 f3       	brcs	.-14     	; 0x20b8 <strrev+0x10>
    20c6:	08 95       	ret

000020c8 <__udivmodhi4>:
    20c8:	aa 1b       	sub	r26, r26
    20ca:	bb 1b       	sub	r27, r27
    20cc:	51 e1       	ldi	r21, 0x11	; 17
    20ce:	07 c0       	rjmp	.+14     	; 0x20de <__udivmodhi4_ep>

000020d0 <__udivmodhi4_loop>:
    20d0:	aa 1f       	adc	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	a6 17       	cp	r26, r22
    20d6:	b7 07       	cpc	r27, r23
    20d8:	10 f0       	brcs	.+4      	; 0x20de <__udivmodhi4_ep>
    20da:	a6 1b       	sub	r26, r22
    20dc:	b7 0b       	sbc	r27, r23

000020de <__udivmodhi4_ep>:
    20de:	88 1f       	adc	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	5a 95       	dec	r21
    20e4:	a9 f7       	brne	.-22     	; 0x20d0 <__udivmodhi4_loop>
    20e6:	80 95       	com	r24
    20e8:	90 95       	com	r25
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
